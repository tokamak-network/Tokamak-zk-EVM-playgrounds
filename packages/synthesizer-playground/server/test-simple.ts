import axios from 'axios';

// Ïã§Ï†ú Ïù¥ÎçîÎ¶¨ÏõÄ Ìä∏ÎûúÏû≠ÏÖò Ìï¥Ïãú (ÌÖåÏä§Ìä∏Ïö©)
const TEST_TX_ID = '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef';

async function testServer() {
  console.log('üöÄ Testing server at http://localhost:3002');
  console.log('==========================================\n');

  try {
    // ÏÑúÎ≤ÑÏóê ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
    console.log(`üì§ Sending request with txId: ${TEST_TX_ID}`);
    
    const response = await axios.post('http://localhost:3002/api/parseTransaction', {
      txId: TEST_TX_ID
    }, {
      timeout: 30000, // 30Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Request successful!');
    console.log('üìä Response status:', response.status);
    
    const data = response.data;
    
    if (data.ok) {
      console.log('\nüìã Response Data Structure:');
      console.log('========================');
      
      // Ï†ÑÏ≤¥ ÏùëÎãµ Íµ¨Ï°∞ ÌôïÏù∏
      console.log('\n1. Ï†ÑÏ≤¥ ÏùëÎãµ Íµ¨Ï°∞:');
      console.log(JSON.stringify(data, null, 2));
      
      // Ï£ºÏöî Îç∞Ïù¥ÌÑ∞ ÌïÑÎìúÎì§ ÌôïÏù∏
      if (data.data) {
        console.log('\n2. Ï£ºÏöî ÌïÑÎìúÎì§:');
        console.log('- from:', data.data.from);
        console.log('- to:', data.data.to);
        console.log('- logs count:', data.data.logs?.length || 0);
        console.log('- storageLoad count:', data.data.storageLoad?.length || 0);
        console.log('- storageStore count:', data.data.storageStore?.length || 0);
        
        // permutationÍ≥º placementInstance ÏÉÅÏÑ∏ ÌôïÏù∏
        console.log('\n3. Permutation Íµ¨Ï°∞:');
        console.log(JSON.stringify(data.data.permutation, null, 2));
        
        console.log('\n4. PlacementInstance Íµ¨Ï°∞:');
        console.log(JSON.stringify(data.data.placementInstance, null, 2));
        
        // logs ÏÉÅÏÑ∏ ÌôïÏù∏
        if (data.data.logs && data.data.logs.length > 0) {
          console.log('\n5. Logs ÏÉÅÏÑ∏:');
          data.data.logs.forEach((log: any, index: number) => {
            console.log(`Log ${index}:`, JSON.stringify(log, null, 2));
          });
        }
        
        // storage Îç∞Ïù¥ÌÑ∞ ÏÉÅÏÑ∏ ÌôïÏù∏
        if (data.data.storageLoad && data.data.storageLoad.length > 0) {
          console.log('\n6. StorageLoad ÏÉÅÏÑ∏ (Ï≤´ 3Í∞ú):');
          data.data.storageLoad.slice(0, 3).forEach((item: any, index: number) => {
            console.log(`StorageLoad ${index}:`, JSON.stringify(item, null, 2));
          });
        }
        
        if (data.data.storageStore && data.data.storageStore.length > 0) {
          console.log('\n7. StorageStore ÏÉÅÏÑ∏ (Ï≤´ 3Í∞ú):');
          data.data.storageStore.slice(0, 3).forEach((item: any, index: number) => {
            console.log(`StorageStore ${index}:`, JSON.stringify(item, null, 2));
          });
        }
      }
      
    } else {
      console.log('‚ùå Request failed:', data.error);
    }
    
  } catch (error: any) {
    console.log('‚ùå Error occurred:');
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Error data:', error.response.data);
    } else if (error.request) {
      console.log('No response received. Server might not be running.');
      console.log('Make sure to start the server with: npm run server');
    } else {
      console.log('Error:', error.message);
    }
  }
}

// Ïã§Ìñâ
testServer().catch(console.error); 